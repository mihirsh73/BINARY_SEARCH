// { Driver Code Starts
//Initial template for C++

#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
//User function template for C++

class Solution{   
public:
    int findCrossover(vector<int> arr, int l, int r, int x)
    {
        if(arr[l]>x)
        {
            return l;
        }
        else if(arr[r]<=x)
        {
            return r;
        }
        while(l<r)
        {
            int mid =(l+r)/2;
            if(arr[mid]<=x && arr[mid+1]>x)
            {
                return mid;
            }
            else if(arr[mid]>x)
            {
                r=mid-1;
                
            }
            else{
                l=mid+1;
            }
        }
        return l;
    }
    vector<int> printKClosest(vector<int> arr, int n, int k, int x) {
        vector<int> res;
        
        int l=findCrossover(arr,0,n-1,x);
        int r= l+1;
        if(arr[l]==x)
        {
            l--;
        }
        int count=0;
        while(l>=0 && r<n && count<k)
        {
            if(x-arr[l]>=arr[r]-x)
            {
                res.push_back(arr[r]);
                r++;
            }
            else{
                res.push_back(arr[l]);
                l--;
            }
            count++;
        }
        while(l>=0 && count<k)
        {
            res.push_back(arr[l]);
            l--;
            count++;
        }
        while(r<n && count<k)
        {
            res.push_back(arr[r]);
            r++;
            count++;
        }
        return res;
    }
};

// { Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, k, x;
        cin >> n;
        vector<int> arr(n);
        for (int i = 0; i < n; i++) {
            cin >> arr[i];
        }
        cin >> k >> x;
        Solution ob;
        auto ans = ob.printKClosest(arr, n, k, x);
        for (auto e : ans) {
            cout << e << " ";
        }
        cout << "\n";
    }
    return 0;
}
  TC O(LOG(N)+K) 
